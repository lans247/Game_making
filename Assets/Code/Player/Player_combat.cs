using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Numerics;
using TMPro;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.UIElements;

public class Player_combat : MonoBehaviour
{
    public List<int> Personality = new List<int>();     //성격

    public int Max_HP = 100;
    public int HP;
    public int Max_MP = 100;
    public int MP;
    public int def = 0;
    public float attack_speed = 1.0f;
    public int damage = 10;
    public bool recovering = false;     //재생중
    public int recover_info = 1;            //재생 수치, 기본 1

    public GameObject UI;


    public UnityEngine.UI.Image HPbar;
    public TextMeshProUGUI HPnum;


    public List<GameObject> attack_image;
    public bool attacking = false;

    public GameObject indicator;        //알림창, 데미지 혹은 체력 회복시


    void Start()
    {

        HP = Max_HP;
        MP = Max_MP;
        
        UI = GameObject.FindWithTag("UI");  //UI 가져오기

        HPbar = UI.transform.Find("HPbar").GetComponent<UnityEngine.UI.Image>();
        HPnum = UI.transform.Find("HPnum").GetComponent<TextMeshProUGUI>();

        

        Personality_reset();                                            //성격 리셋
    }

    
    void FixedUpdate()
    {
        HPbar.fillAmount = HP * 1.0f / Max_HP;   //HP바 가져와서 쓰기
        HPnum.text = HP.ToString();

        attack();

        if(!recovering)     //회복중 아닐때 재생 시행
        {
            StartCoroutine("recover");
        }

        Personality_setting();      //성격에 따른 변화


    }

    

    void attack()           //공격 / 딜레이 호출 -> 딜레이에서 콤보 호출 -> 콤보 끝나면 대기후 다시 복귀
    {
        if (Input.GetMouseButton(0) && !attacking)
        {
            attacking = true;
            StartCoroutine(attack_delay());
        }
    }

    IEnumerator attack_delay()      //공격딜레이
    {
        yield return StartCoroutine(combo_attack());
        Debug.Log("초세기 시작");
        yield return new WaitForSeconds(2 - attack_speed);
        attacking = false;
    }


    IEnumerator combo_attack()
    {
        int combo_num = 0;
        float combo_delay = attack_speed * 0.5f;
        int max_combo = attack_image.Count;

        while(combo_num < max_combo)
        {
            UnityEngine.Vector2 ve = (Camera.main.ScreenToWorldPoint(Input.mousePosition) - transform.position).normalized;     //클릭하는 방향
            quaternion normal = quaternion.Euler(0, 0, Mathf.Atan2(ve.y, ve.x) - 3.14f);                //방향


            attack_image[combo_num].GetComponent<attack_image>().damage = damage;      //만들이미지에 데미지 넣기
            Instantiate(attack_image[combo_num], transform.position, normal);         //1칸 띄어서 생성

            combo_num++;


            //다음 콤보 연계
            yield return new WaitForSeconds(1 - combo_delay);
            if(!Input.GetMouseButton(0))        //콤보딜레이 사이동안 입력이 없으면 콤보어택 취소
            {
                break;
            }
        }

    }








    IEnumerator recover()       //재생
    {
        recovering = true;      //재생중

        int now = HP;           //비교용 HP

        for(int i = 0;i<10;i++)
        {
            yield return new WaitForSeconds(1f);
            if(now < HP)        //피가 기존보다 작아지면(데미지 받으면)
            {
                recovering = false;
                yield break;       //리커버링 꺼버리기
            }
        }
        while(HP < Max_HP)      //최대체력 까지
        {
            HP += recover_info;     //회복
            indicate(recover_info);
            yield return new WaitForSeconds(1f);    //시간마다
        }

    }


    public void Personality_reset()     //초기 세팅
    {
        Debug.Log("innitial");
        Personality.Add(0);       //교만 , 겸손 0
        Personality.Add(0);       //탐욕 , 자선 1
        Personality.Add(0);        //질투 , 친절2
        Personality.Add(0);       //분노 , 인내 3
        Personality.Add(0);        //음욕 , 정결4
        Personality.Add(0);    //탐욕 , 절제    5
        Personality.Add(0);       //나태 , 근면 6
    }

    public void Personality_setting()   //세팅이 따른 변화
    {
        
    }

















    public void indicate(int dama)       //데미지 인디케이터 소환, 리커버리도 포함
    {
        indicator.GetComponent<indicator>().type = "recover";
        indicator.GetComponent<indicator>().content = dama;
        Instantiate(indicator, transform.position, UnityEngine.Quaternion.Euler(0, 0, 0));
    }
}
